{
  "api/InkTools.DialogRenderer.html": {
    "href": "api/InkTools.DialogRenderer.html",
    "title": "Class DialogRenderer | MysticForestParkRanger",
    "keywords": "Class DialogRenderer Namespace InkTools Assembly ScriptAssembly.dll public class DialogRenderer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DialogRenderer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields defaultFont protected TMP_FontAsset defaultFont Field Value TMP_FontAsset defaultFontSize protected float defaultFontSize Field Value float dialog protected TextMeshProUGUI dialog Field Value TextMeshProUGUI dialogParent protected RectTransform dialogParent Field Value RectTransform symbolsFont [SerializeField] protected TMP_FontAsset symbolsFont Field Value TMP_FontAsset worldCamera protected Camera worldCamera Field Value Camera Methods Init() public void Init() Render(DialogLine) public void Render(InkManager.DialogLine line) Parameters line InkManager.DialogLine TryGetCharacter(string, out GameObject) protected bool TryGetCharacter(string name, out GameObject character) Parameters name string character GameObject Returns bool"
  },
  "api/InkTools.InkCommandDef.InkCommand.html": {
    "href": "api/InkTools.InkCommandDef.InkCommand.html",
    "title": "Class InkCommand | MysticForestParkRanger",
    "keywords": "Class InkCommand Namespace InkTools.InkCommandDef Assembly ScriptAssembly.dll Command that can be executed from Ink. Can be executed with $NameOfCommandClass #arg1 #arg2 #arg3 public abstract class InkCommand Inheritance object InkCommand Derived moveTo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InkCommand(List<string>, out string) public InkCommand(List<string> args, out string error) Parameters args List<string> error string Properties requiresUpdate Should we call Update() every frame? public virtual bool requiresUpdate { get; } Property Value bool usage public abstract string usage { get; } Property Value string Methods CommandWrite(string, List<string>) public static string CommandWrite(string name, List<string> args) Parameters name string args List<string> Returns string Update() To call if requiresUpdate is true. public virtual bool Update() Returns bool If update has finished, and we can remove this command from the list."
  },
  "api/InkTools.InkCommandDef.html": {
    "href": "api/InkTools.InkCommandDef.html",
    "title": "Namespace InkTools.InkCommandDef | MysticForestParkRanger",
    "keywords": "Namespace InkTools.InkCommandDef Classes InkCommand Command that can be executed from Ink. Can be executed with $NameOfCommandClass #arg1 #arg2 #arg3 moveTo"
  },
  "api/InkTools.InkCommandDef.moveTo.html": {
    "href": "api/InkTools.InkCommandDef.moveTo.html",
    "title": "Class moveTo | MysticForestParkRanger",
    "keywords": "Class moveTo Namespace InkTools.InkCommandDef Assembly ScriptAssembly.dll public class moveTo : InkCommand Inheritance object InkCommand moveTo Inherited Members InkCommand.CommandWrite(string, List<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors moveTo(List<string>, out string) public moveTo(List<string> args, out string error) Parameters args List<string> error string Properties requiresUpdate Should we call Update() every frame? public override bool requiresUpdate { get; } Property Value bool usage public override string usage { get; } Property Value string Methods Update() To call if requiresUpdate is true. public override bool Update() Returns bool If update has finished, and we can remove this command from the list."
  },
  "api/InkTools.InkCommands.html": {
    "href": "api/InkTools.InkCommands.html",
    "title": "Class InkCommands | MysticForestParkRanger",
    "keywords": "Class InkCommands Namespace InkTools Assembly ScriptAssembly.dll For running commands created from Ink. public class InkCommands Inheritance object InkCommands Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InkCommands() public InkCommands() Fields commandRegex protected static Regex commandRegex Field Value Regex commands protected Dictionary<string, ConstructorInfo> commands Field Value Dictionary<string, ConstructorInfo> Methods Evaluate(string, List<string>) public void Evaluate(string commandString, List<string> tags) Parameters commandString string tags List<string> Update() public void Update()"
  },
  "api/InkTools.InkManager.DialogLine.html": {
    "href": "api/InkTools.InkManager.DialogLine.html",
    "title": "Struct InkManager.DialogLine | MysticForestParkRanger",
    "keywords": "Struct InkManager.DialogLine Namespace InkTools Assembly ScriptAssembly.dll public struct InkManager.DialogLine Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DialogLine(string, string, List<string>) public DialogLine(string character, string dialog, List<string> tags) Parameters character string dialog string tags List<string> Properties character public readonly string character { get; } Property Value string dialog public readonly string dialog { get; } Property Value string tags public readonly List<string> tags { get; } Property Value List<string>"
  },
  "api/InkTools.InkManager.html": {
    "href": "api/InkTools.InkManager.html",
    "title": "Class InkManager | MysticForestParkRanger",
    "keywords": "Class InkManager Namespace InkTools Assembly ScriptAssembly.dll public class InkManager : MonoBehaviour, ISingleton<InkManager> Inheritance object Object Component Behaviour MonoBehaviour InkManager Implements ISingleton<InkManager> Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields dialogEnd public UnityEvent dialogEnd Field Value UnityEvent dialogInstance protected GameObject dialogInstance Field Value GameObject dialogRenderer protected DialogRenderer dialogRenderer Field Value DialogRenderer inkJSONAsset [SerializeField] protected TextAsset inkJSONAsset Field Value TextAsset lineMatchRegex protected static Regex lineMatchRegex Field Value Regex runOnStart public bool runOnStart Field Value bool story protected Story story Field Value Story Properties storyActive public static bool storyActive { get; } Property Value bool Methods AdvanceStory() public void AdvanceStory() DrawDialog(DialogLine) protected void DrawDialog(InkManager.DialogLine line) Parameters line InkManager.DialogLine EvaluateStory() protected void EvaluateStory() LineFromString(string) protected InkManager.DialogLine LineFromString(string text) Parameters text string Returns InkManager.DialogLine StartDialog(string) public void StartDialog(string name) Parameters name string TryFindCharacter(string, out GameObject) protected bool TryFindCharacter(string name, out GameObject character) Parameters name string character GameObject Returns bool"
  },
  "api/InkTools.html": {
    "href": "api/InkTools.html",
    "title": "Namespace InkTools | MysticForestParkRanger",
    "keywords": "Namespace InkTools Namespaces InkTools.InkCommandDef Classes DialogRenderer InkCommands For running commands created from Ink. InkManager Structs InkManager.DialogLine"
  },
  "api/Interactions.Behaviors.CustomInteraction.html": {
    "href": "api/Interactions.Behaviors.CustomInteraction.html",
    "title": "Class CustomInteraction | MysticForestParkRanger",
    "keywords": "Class CustomInteraction Namespace Interactions.Behaviors Assembly ScriptAssembly.dll [Serializable] public class CustomInteraction : InteractionBehavior Inheritance object InteractionBehavior CustomInteraction Inherited Members InteractionBehavior.interactionObject InteractionBehavior.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomInteraction(Interaction) public CustomInteraction(Interaction parent) Parameters parent Interaction Fields interactionFunc [SerializeField] protected string interactionFunc Field Value string onInteract [SerializeField] protected UnityEvent onInteract Field Value UnityEvent Properties isInteracting Are we currently having an interaction happen? If this is true, this supresses all other interactions in the scene. If active for more than one frame, Update() is called. public override bool isInteracting { get; } Property Value bool Methods Interact() public override void Interact() OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/Interactions.Behaviors.InkInteraction.html": {
    "href": "api/Interactions.Behaviors.InkInteraction.html",
    "title": "Class InkInteraction | MysticForestParkRanger",
    "keywords": "Class InkInteraction Namespace Interactions.Behaviors Assembly ScriptAssembly.dll For displaying dialog in Ink. Should be customizable, but right now just loads interact_Name for the Name of the current GameObject. [Serializable] public class InkInteraction : InteractionBehavior Inheritance object InteractionBehavior InkInteraction Inherited Members InteractionBehavior.interactionObject InteractionBehavior.Update() InteractionBehavior.OnInspectorGUI() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InkInteraction(Interaction) public InkInteraction(Interaction parent) Parameters parent Interaction Properties isInteracting Are we currently having an interaction happen? If this is true, this supresses all other interactions in the scene. If active for more than one frame, Update() is called. public override bool isInteracting { get; } Property Value bool Methods EndDialog() public void EndDialog() Interact() public override void Interact() InteractAdvance(bool) public void InteractAdvance(bool pressed) Parameters pressed bool"
  },
  "api/Interactions.Behaviors.InteractionBehavior.html": {
    "href": "api/Interactions.Behaviors.InteractionBehavior.html",
    "title": "Class InteractionBehavior | MysticForestParkRanger",
    "keywords": "Class InteractionBehavior Namespace Interactions.Behaviors Assembly ScriptAssembly.dll A serialized class meant to control different interaction behaviors when space is pressed on one. This is to avoid having to attach multiple monobehaviors for anything with one interaction. If you want to add your own, you can either use Custom (in progress), or create a subclass of InteractionBehavior. [Serializable] public abstract class InteractionBehavior Inheritance object InteractionBehavior Derived CustomInteraction InkInteraction PushableInteraction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InteractionBehavior(Interaction) public InteractionBehavior(Interaction parent) Parameters parent Interaction Fields interactionObject Reference to the MonoBehaviour Interaction for accessing things like position. It's a serialized field so we don't lose the reference to the parent when the scene starts. [SerializeField] protected Interaction interactionObject Field Value Interaction Properties isInteracting Are we currently having an interaction happen? If this is true, this supresses all other interactions in the scene. If active for more than one frame, Update() is called. public abstract bool isInteracting { get; } Property Value bool Methods Interact() public abstract void Interact() OnInspectorGUI() public virtual void OnInspectorGUI() Update() public virtual void Update()"
  },
  "api/Interactions.Behaviors.PushableInteraction.html": {
    "href": "api/Interactions.Behaviors.PushableInteraction.html",
    "title": "Class PushableInteraction | MysticForestParkRanger",
    "keywords": "Class PushableInteraction Namespace Interactions.Behaviors Assembly ScriptAssembly.dll [Serializable] public class PushableInteraction : InteractionBehavior Inheritance object InteractionBehavior PushableInteraction Inherited Members InteractionBehavior.interactionObject InteractionBehavior.OnInspectorGUI() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PushableInteraction(Interaction) public PushableInteraction(Interaction parent) Parameters parent Interaction Fields isPushing protected bool isPushing Field Value bool Properties isInteracting Are we currently having an interaction happen? If this is true, this supresses all other interactions in the scene. If active for more than one frame, Update() is called. public override bool isInteracting { get; } Property Value bool Methods Interact() public override void Interact() ReleasePush(bool) protected void ReleasePush(bool pressed) Parameters pressed bool Update() public override void Update()"
  },
  "api/Interactions.Behaviors.html": {
    "href": "api/Interactions.Behaviors.html",
    "title": "Namespace Interactions.Behaviors | MysticForestParkRanger",
    "keywords": "Namespace Interactions.Behaviors Classes CustomInteraction InkInteraction For displaying dialog in Ink. Should be customizable, but right now just loads interact_Name for the Name of the current GameObject. InteractionBehavior A serialized class meant to control different interaction behaviors when space is pressed on one. This is to avoid having to attach multiple monobehaviors for anything with one interaction. If you want to add your own, you can either use Custom (in progress), or create a subclass of InteractionBehavior. PushableInteraction"
  },
  "api/Interactions.Interaction.InteractionType.html": {
    "href": "api/Interactions.Interaction.InteractionType.html",
    "title": "Enum Interaction.InteractionType | MysticForestParkRanger",
    "keywords": "Enum Interaction.InteractionType Namespace Interactions Assembly ScriptAssembly.dll public enum Interaction.InteractionType Fields Custom = 2 Ink = 0 Pushable = 1"
  },
  "api/Interactions.Interaction.html": {
    "href": "api/Interactions.Interaction.html",
    "title": "Class Interaction | MysticForestParkRanger",
    "keywords": "Class Interaction Namespace Interactions Assembly ScriptAssembly.dll public class Interaction : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Interaction Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields behavior [SerializeReference] public InteractionBehavior behavior Field Value InteractionBehavior type public Interaction.InteractionType type Field Value Interaction.InteractionType Methods HasInteractionBehavior() public bool HasInteractionBehavior() Returns bool Interact() public void Interact() IsInteracting() public bool IsInteracting() Returns bool"
  },
  "api/Interactions.InteractionEditor.html": {
    "href": "api/Interactions.InteractionEditor.html",
    "title": "Class InteractionEditor | MysticForestParkRanger",
    "keywords": "Class InteractionEditor Namespace Interactions Assembly EditorAssembly.dll Editor for Interaction, to make selecting InteractionBehavior automated and easy for designers. TODO: Need to figure out how to access the serialized properties of InteractionBehavior. [CustomEditor(typeof(Interaction))] [CanEditMultipleObjects] public class InteractionEditor : Editor Inheritance object Object ScriptableObject Editor InteractionEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/Interactions.InteractionManager.html": {
    "href": "api/Interactions.InteractionManager.html",
    "title": "Class InteractionManager | MysticForestParkRanger",
    "keywords": "Class InteractionManager Namespace Interactions Assembly ScriptAssembly.dll public class InteractionManager : MonoBehaviour, ISingleton<InteractionManager> Inheritance object Object Component Behaviour MonoBehaviour InteractionManager Implements ISingleton<InteractionManager> Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields interactionButton protected RectTransform interactionButton Field Value RectTransform interactionRange public float interactionRange Field Value float interactionsInScene protected Interaction[] interactionsInScene Field Value Interaction[] mainCamera protected Camera mainCamera Field Value Camera player protected GameObject player Field Value GameObject Methods CanInteract() protected bool CanInteract() Returns bool"
  },
  "api/Interactions.html": {
    "href": "api/Interactions.html",
    "title": "Namespace Interactions | MysticForestParkRanger",
    "keywords": "Namespace Interactions Namespaces Interactions.Behaviors Classes Interaction InteractionEditor Editor for Interaction, to make selecting InteractionBehavior automated and easy for designers. TODO: Need to figure out how to access the serialized properties of InteractionBehavior. InteractionManager Enums Interaction.InteractionType"
  },
  "api/MysticForestParkRanger.InteractionEditor.html": {
    "href": "api/MysticForestParkRanger.InteractionEditor.html",
    "title": "Class InteractionEditor | MysticForestParkRanger",
    "keywords": "Class InteractionEditor Namespace MysticForestParkRanger Assembly EditorAssembly.dll Editor for Interaction, to make selecting InteractionBehavior automated and easy for designers. TODO: Need to figure out how to access the serialized properties of InteractionBehavior. [CustomEditor(typeof(Interaction))] [CanEditMultipleObjects] public class InteractionEditor : Editor Inheritance object Object ScriptableObject Editor InteractionEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/MysticForestParkRanger.UIController.html": {
    "href": "api/MysticForestParkRanger.UIController.html",
    "title": "Class UIController | MysticForestParkRanger",
    "keywords": "Class UIController Namespace MysticForestParkRanger Assembly ScriptAssembly.dll public class UIController : MonoBehaviour, ISingleton<UIController> Inheritance object Object Component Behaviour MonoBehaviour UIController Implements ISingleton<UIController> Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields onInteract public UnityEvent<bool> onInteract Field Value UnityEvent<bool> Methods OnInteract(InputValue) New input system control. DO NOT RENAME (Looking at you, Tyler) public void OnInteract(InputValue value) Parameters value InputValue"
  },
  "api/MysticForestParkRanger.characterController.html": {
    "href": "api/MysticForestParkRanger.characterController.html",
    "title": "Class characterController | MysticForestParkRanger",
    "keywords": "Class characterController Namespace MysticForestParkRanger Assembly ScriptAssembly.dll public class characterController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour characterController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/MysticForestParkRanger.html": {
    "href": "api/MysticForestParkRanger.html",
    "title": "Namespace | MysticForestParkRanger",
    "keywords": "Namespace Classes UIController characterController"
  },
  "api/Utility.ISingleton-1.html": {
    "href": "api/Utility.ISingleton-1.html",
    "title": "Interface ISingleton<T> | MysticForestParkRanger",
    "keywords": "Interface ISingleton<T> Namespace Utility Assembly ScriptAssembly.dll Singleton Interface. public interface ISingleton<T> where T : MonoBehaviour Type Parameters T Properties Instance public static T Instance { get; protected set; } Property Value T Methods Initialize() void Initialize()"
  },
  "api/Utility.html": {
    "href": "api/Utility.html",
    "title": "Namespace Utility | MysticForestParkRanger",
    "keywords": "Namespace Utility Interfaces ISingleton<T> Singleton Interface."
  },
  "docs/Scenes/PrototypeZero.html": {
    "href": "docs/Scenes/PrototypeZero.html",
    "title": "Prototype Zero | MysticForestParkRanger",
    "keywords": "Prototype Zero This is a scene meant to test all the basic interactions that we might need. So: Pushing and pulling Ink interactions Character movement Probably going to start moving things into a more official scene (i.e., merging with environment test soon.)"
  },
  "docs/Scenes/environment test.html": {
    "href": "docs/Scenes/environment test.html",
    "title": "environment test | MysticForestParkRanger",
    "keywords": "environment test Set up by Athena, mostly just is a probuilder environment with character controls. To be merged with PrototypeZero"
  },
  "docs/Tutorials/interaction.html": {
    "href": "docs/Tutorials/interaction.html",
    "title": "Interaction System | MysticForestParkRanger",
    "keywords": "Interaction System Adding Interactions Here it is, in a nutshell: Create a new game object. Add the \"Interaction\" component. Creating your own interactions You have two options. Custom interactions, or going into the code and adding your own InteractionBehavior. Custom Interactions WIP. Not finished. Will be sometime this Sprint! InteractionBehavior You add your own scripted InteractionBehavior thusly: Create a subclass of InteractionBehavior Go to InteractionEditor and under CreateBehavior, add your custom type. Setting up Interactions If whatever scene you're working in doesn't have the spacebar appearing over interactions, you need to add interactions. TODO: This."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | MysticForestParkRanger",
    "keywords": "Introduction Doc Structure You'll see some items on the left. Here's a description of each: Tutorials Any relevant tutorials to a subject you may be trying to learn about. There will be subcategories based on the subject. Scenes A list of all the scenes contained in the build and a description of what they're there for. Writing your own Docs DocFX has some documentation on this subject. Write your articles in Documentation/docs as .md files. Then to add them to the table of contents in Documentation/docs: https://dotnet.github.io/docfx/docs/table-of-contents.html. Assets are exposed in the Documentation/assets folder, so place any items you need in there, then access them with /assets/path/to/asset.mp4. For instance, you can check the source for this .md file to see the relative path to the site icon: Which is /assets/images/icon.png. If you want to test your changes locally, you'll need docfx installed: https://dotnet.github.io/docfx/index.html (You should already have the .NET SDK if you're running Unity) Then you can run docfx build Documentation/docfx.json --serve to preview your changes."
  },
  "index.html": {
    "href": "index.html",
    "title": "Mystic Forest Park Ranger | MysticForestParkRanger",
    "keywords": "Mystic Forest Park Ranger Welcome to the documentation for MysticForestParkRanger! If you're a programmer, you might want to check the API. For tutorials, check the Docs. Feel free to contribute to this repository in the Documentation folder on Github. Markdown files can be added in Documentation/docs. Comments that use XML formatting (i.e., ///>summary<) from within the project will be added. Refer to Markdown for how to write markdown files. Generating Documentation Unfortunately, automatic updates are not allowed due to the .gitignore for Unity removing the crucial elements that need to be tracked for automatic generation. To update this documentation for yourself at any time (if you have docfx installed), you have two routes: Windows Run build.ps1 in Documentation/docs If you want to preview the docs, you can add build.ps1 --serve to run a local server. MacOS/Linux Run build.sh in Documentation/docs. If you want to preview the docs, you can add build.sh --serve to run a local server. If you experience any bugs, let Tyler know."
  }
}