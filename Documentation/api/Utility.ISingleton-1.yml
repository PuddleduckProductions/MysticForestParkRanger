### YamlMime:ManagedReference
items:
- uid: Utility.ISingleton`1
  commentId: T:Utility.ISingleton`1
  id: ISingleton`1
  parent: Utility
  children:
  - Utility.ISingleton`1.Initialize
  - Utility.ISingleton`1.Instance
  langs:
  - csharp
  - vb
  name: ISingleton<T>
  nameWithType: ISingleton<T>
  fullName: Utility.ISingleton<T>
  type: Interface
  source:
    remote:
      path: Assets/Scripts/Util/Singleton.cs
      branch: documentation
      repo: https://github.com/PuddleduckProductions/MysticForestParkRanger.git
    id: ISingleton
    path: ../Assets/Scripts/Util/Singleton.cs
    startLine: 5
  assemblies:
  - ScriptAssembly
  namespace: Utility
  syntax:
    content: 'public interface ISingleton<T> where T : MonoBehaviour'
    typeParameters:
    - id: T
    content.vb: Public Interface ISingleton(Of T As MonoBehaviour)
  nameWithType.vb: ISingleton(Of T)
  fullName.vb: Utility.ISingleton(Of T)
  name.vb: ISingleton(Of T)
- uid: Utility.ISingleton`1.Instance
  commentId: P:Utility.ISingleton`1.Instance
  id: Instance
  parent: Utility.ISingleton`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: ISingleton<T>.Instance
  fullName: Utility.ISingleton<T>.Instance
  type: Property
  source:
    remote:
      path: Assets/Scripts/Util/Singleton.cs
      branch: documentation
      repo: https://github.com/PuddleduckProductions/MysticForestParkRanger.git
    id: Instance
    path: ../Assets/Scripts/Util/Singleton.cs
    startLine: 6
  assemblies:
  - ScriptAssembly
  namespace: Utility
  syntax:
    content: public static T Instance { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared Property Instance As T
  overload: Utility.ISingleton`1.Instance*
  nameWithType.vb: ISingleton(Of T).Instance
  fullName.vb: Utility.ISingleton(Of T).Instance
- uid: Utility.ISingleton`1.Initialize
  commentId: M:Utility.ISingleton`1.Initialize
  id: Initialize
  parent: Utility.ISingleton`1
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: ISingleton<T>.Initialize()
  fullName: Utility.ISingleton<T>.Initialize()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Util/Singleton.cs
      branch: documentation
      repo: https://github.com/PuddleduckProductions/MysticForestParkRanger.git
    id: Initialize
    path: ../Assets/Scripts/Util/Singleton.cs
    startLine: 8
  assemblies:
  - ScriptAssembly
  namespace: Utility
  syntax:
    content: void Initialize()
    content.vb: Sub Initialize()
  overload: Utility.ISingleton`1.Initialize*
  nameWithType.vb: ISingleton(Of T).Initialize()
  fullName.vb: Utility.ISingleton(Of T).Initialize()
references:
- uid: Utility
  commentId: N:Utility
  href: Utility.html
  name: Utility
  nameWithType: Utility
  fullName: Utility
- uid: Utility.ISingleton`1.Instance*
  commentId: Overload:Utility.ISingleton`1.Instance
  href: Utility.ISingleton-1.html#Utility_ISingleton_1_Instance
  name: Instance
  nameWithType: ISingleton<T>.Instance
  fullName: Utility.ISingleton<T>.Instance
  nameWithType.vb: ISingleton(Of T).Instance
  fullName.vb: Utility.ISingleton(Of T).Instance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  commentId: '!:T'
  name: T
  nameWithType: T
  fullName: T
- uid: Utility.ISingleton`1.Initialize*
  commentId: Overload:Utility.ISingleton`1.Initialize
  href: Utility.ISingleton-1.html#Utility_ISingleton_1_Initialize
  name: Initialize
  nameWithType: ISingleton<T>.Initialize
  fullName: Utility.ISingleton<T>.Initialize
  nameWithType.vb: ISingleton(Of T).Initialize
  fullName.vb: Utility.ISingleton(Of T).Initialize
